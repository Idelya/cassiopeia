// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ShoppingContext))]
    [Migration("20230131023423_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Data.Models.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.ToTable("Delivery");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Paczkomat InPost",
                            Price = 10.5
                        },
                        new
                        {
                            ID = 2,
                            Name = "Kurier DHL",
                            Price = 15.5
                        },
                        new
                        {
                            ID = 3,
                            Name = "Kurier UDP",
                            Price = 17.5
                        },
                        new
                        {
                            ID = 4,
                            Name = "Kurier PEQ",
                            Price = 19.0
                        },
                        new
                        {
                            ID = 5,
                            Name = "Kurier LA",
                            Price = 18.699999999999999
                        });
                });

            modelBuilder.Entity("Data.Models.Offer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SellerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Offer");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Książka",
                            Price = 46.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Telefon",
                            Price = 4326.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Rower",
                            Price = 640.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 4,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Lampa",
                            Price = 90.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Koc",
                            Price = 140.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Widokówka",
                            Price = 10.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Pudełko",
                            Price = 12.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 8,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Komputer",
                            Price = 4600.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 9,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Słuchawki",
                            Price = 240.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 10,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Kubek",
                            Price = 12.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 11,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Poduszka",
                            Price = 132.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 12,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Obraz",
                            Price = 64.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 13,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Kwiatek",
                            Price = 260.0,
                            SellerID = "2"
                        },
                        new
                        {
                            ID = 14,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            DisplayAmount = 0,
                            Name = "Pluszak",
                            Price = 60.0,
                            SellerID = "2"
                        });
                });

            modelBuilder.Entity("Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("TotalCost")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Data.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BuyerID")
                        .HasColumnType("integer");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("integer");

                    b.Property<int>("OfferID")
                        .HasColumnType("integer");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OfferID")
                        .IsUnique();

                    b.HasIndex("OrderID");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("DeliveryOffer", b =>
                {
                    b.Property<int>("DeliveryTypesID")
                        .HasColumnType("integer");

                    b.Property<int>("OffersID")
                        .HasColumnType("integer");

                    b.HasKey("DeliveryTypesID", "OffersID");

                    b.HasIndex("OffersID");

                    b.ToTable("DeliveryOffer");

                    b.HasData(
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 1
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 1
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 1
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 2
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 2
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 2
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 2
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 3
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 3
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 4
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 4
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 5
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 6
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 6
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 6
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 7
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 7
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 7
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 8
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 8
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 9
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 9
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 9
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 9
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 10
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 10
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 10
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 11
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 11
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 12
                        },
                        new
                        {
                            DeliveryTypesID = 1,
                            OffersID = 13
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 13
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 13
                        },
                        new
                        {
                            DeliveryTypesID = 2,
                            OffersID = 14
                        },
                        new
                        {
                            DeliveryTypesID = 3,
                            OffersID = 14
                        },
                        new
                        {
                            DeliveryTypesID = 4,
                            OffersID = 14
                        });
                });

            modelBuilder.Entity("Data.Models.Order", b =>
                {
                    b.HasOne("Data.Models.Address", "Address")
                        .WithOne("Order")
                        .HasForeignKey("Data.Models.Order", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Data.Models.Purchase", b =>
                {
                    b.HasOne("Data.Models.Delivery", "Delivery")
                        .WithMany("Purchases")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Offer", "Offer")
                        .WithOne("Purchase")
                        .HasForeignKey("Data.Models.Purchase", "OfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Order", "Order")
                        .WithMany("Purchases")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Offer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DeliveryOffer", b =>
                {
                    b.HasOne("Data.Models.Delivery", null)
                        .WithMany()
                        .HasForeignKey("DeliveryTypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Offer", null)
                        .WithMany()
                        .HasForeignKey("OffersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Address", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Delivery", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Data.Models.Offer", b =>
                {
                    b.Navigation("Purchase")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Order", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
